function [x,mask,mn] = ec_rereference(x,mask,refChs,o)
% Noisetools function modified by Kevin Tan (2022)
%      Modifications: compute efficiency & reduce rank reduction
%
% [y,mn]=nt_rereference2(x,mask,thresh,factor) 
%
%   y: rereferenced data
%   mn: subtracted reference
%   mask: channel mask
%
%   x: data to rereference (time X channels)
%   mask: channel mask
%   thresh: std threshold to discard channel [default: 3]
%   factor: apply to mean before subtracting [default: 1]
%   
% See also: nt_rereference, nt_detrend, nt_outliers

%% Input validation
arguments
    x {mustBeFloat}
    mask (1,:) logical = true(1,size(x,2))
    refChs {isnumeric,islogical} = 0
    o.thresh {isnumeric} = 0
    o.iters {mustBeGreaterThanOrEqual(o.iters,1)} = 1
    o.forceRankCorrect logical = false
end
if numel(mask)~=width(x); error("Mask length must equal number of channels (width of x)"); end
if islogical(refChs) && numel(refChs)~=width(x); error("refChs (logical) length must equal number of channels (width of x)"); end
if o.forceRankCorrect || any(refChs); doRankCorrect=true; else; doRankCorrect=false; end
if isempty(o.thresh); o.thresh=0; end

%% Robust reference
rnk = ec_rank(x); % get initial data rank
if any(refChs); mask(refChs)=false; end % exclude reference chans
disp("Robust rereference: iter=0 | chs="+width(x)+" | refChs="+nnz(mask)+" | rank="+rnk); 

% Loop across iterations
for t = 1:o.iters
    % Add 1 to denomenator of mean to avoid losing data rank
    if doRankCorrect || rnk<width(x)
        d = 1;
    else
        d = 0;
    end

    % Robust reference to good chans
    mn = sum(x(:,mask),2,"omitnan") / (nnz(mask) + d); % d in denominator for rank correction
    x = x - mn; % reference all chans to good chans

    % Remove outlier chans from good chans
    if o.thresh > 0
        x_mad = mad(x,1)/mad(x(:,mask),1);
        mask(x_mad > o.thresh) = 0; % remove outlier chans from good chans
    end

    % Check rank
    rnk = ec_rank(x); % Compare num chans/rank with next iteration
    disp("Robust rereference: iter="+t+" | chs="+width(x)+" | refChs="+nnz(mask)+" | rank="+rnk); 
end



