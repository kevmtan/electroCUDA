function [elecMatrix, elecLabels, elecRgb, elecPairs, elecPresent]=mgrid2matlab(mgridFname,hem)
%function [elecMatrix, elecLabels, elecRgb, elecPairs, elecPresent]=mgrid2matlab(mgridFname,hem)
%
% Optional Inputs:
%  mgridFname - The filename AND path of the mgrid file you wish to import or the
%               freesurfer name of the subject. If not specified, an 
%               spm_select gui pops up for you to save the file
%  hem        - ['l' or 'r'] The hemisphere of the mgrid file you wish to
%               load. Necessary (and only used) if mgridFname is a freesurfer name.
%
% Output:
%  elecMatrix  - 3D matrix of electrode coordinates. Column 1 is R->L (i.e.,
%                1 is the right-most plane of voxels). Column 2 is in S->I
%                (i.e., 1 is the most superior plane of voxels). Column 3 is
%                A->P (i.e., 1 is the most anterior plane of voxels).
%  elecLabels  - Cell array of electrode names corresponding to each row of
%                elecMatrix
%  elecRgb     - Matrix of RGB colors for each electrode. The nth row of
%                elecRgb corresponds to the nth element of elecLabels.
%  elecPairs   - ??
%  elecPresent - ??
%
%  Examples:
%   Load with a GUI:
%   >>[elecMatrix, elecLabels, elecRgb]=mgrid2matlab();
%
%   Load using FreeSurfer storage conventions:
%   >>[elecMatrix, elecLabels, elecRgb]=mgrid2matlab('TWH11','l');
%
%   Load using an full mgrid filename:
%   >>[elecMatrix, elecLabels, elecRgb]=mgrid2matlab('/Applications/freesurfer/subjects/TWH11/elec_recon/TWH11_left.mgrid');
%
%
% Authors: Saba Shahab & David M. Groppe
% Feb. 2015
% Feinstein Institute for Medical Research/Univ. of Toronto

% Future work:
% -get this function to return electrode neighbors too?
% -check to see if it works for invisible electrodes?

if nargin<1
    [dataMGRID.elecName]=spm_select(1,'mgrid','select the .mgrid file generated by BioImageSuite');
else
    fsdir=getenv('SUBJECTS_DIR');
    if strcmpi(hem,'L')
        files=dir(sprintf('%s/%s/elec_recon/*left.mgrid',fsdir,mgridFname));
    elseif strcmpi(hem,'R')
        files=dir(sprintf('%s/%s/elec_recon/*right.mgrid',fsdir,mgridFname));
    else
        error('Invalid value for "hem" parameter.');
    end
    if length(files)>1
        error('Multiple mgrid files exist for this hemisphere.');
    elseif isempty(files)
        error('No mgrid files exist for this hemisphere.');
    end
    mgridFname=sprintf(sprintf('%s/%s/elec_recon/%s',fsdir,mgridFname,files(1).name));
end
fid = fopen(mgridFname, 'r');

elecMatrix = [];
elecLabels=[];
elecRgb=[];
elecPairs=[];
elecPresent=[];
ct=0;
crntLabel=[];
crntCt=0;
crntColor=[1 1 1];
nStripGrid=0;
nPairs=0;

% Get rid of header
while feof(fid) == 0
    line = fgetl(fid);
    if strcmp(line,'#- - - - - - - - - - - - - - - - - - -')
        break;
    end
end

while feof(fid) == 0
    line = fgetl(fid);
    if strcmpi(line, '#Position')
        % New electrode
        line = fgetl(fid);
        ct=ct+1; % # of electrodes
        elecMatrix=[elecMatrix; str2num(line)];
        if dim(1)==1
            % strip electrode
            elecLabels{ct}=[crntLabel '-' num2str(crntCt)];
            tempLabelsCt=tempLabelsCt+1;
            tempLabels{tempLabelsCt}=elecLabels{ct}; % dash between electrode
            %name and number
            %tempLabels{tempLabelsCt}=[crntLabel num2str(crntCt)]; %no dash
        else
            % Grid electrode
            % NOTE, I AM NOT SURE IF THE CODE BELOW WORKS FOR RECTANGULAR
            % GRIDS
            % I think dim=[nRow nColumn]
            nRow=dim(1);
            nCol=dim(2);
            flipCt=(nRow*nCol)-crntCt+1;
            m=floor((flipCt-1)/nRow);
            r=(flipCt-1)-m*nRow;
            gridElecNum=(flipCt-1)+(nRow-1-m)*(nRow+1)-(nCol-r)*(nCol-1)+1;
            fprintf('flipCt=%d, elec=%d (mod=%d, rem=%d)\n',flipCt,gridElecNum,m,r);
            elecLabels{ct}=[crntLabel '-' num2str(gridElecNum)];
            tempLabelsCt=tempLabelsCt+1;
            tempLabels{tempLabelsCt}=elecLabels{ct}; % dash between electrode
            %name and number
            %tempLabels{tempLabelsCt}=[crntLabel num2str(crntCt)]; %no dash
        end
        elecRgb(ct,1:3)=crntColor;
        crntCt=crntCt-1;
    elseif strcmpi(line, '#Electrode Present')
        % indicates if electrode has been cut out
        line = fgetl(fid);
        elecPresent(ct)=str2num(line);
    elseif strcmpi(line,'#Description')
        % New strip/grid name
        % This is the first line we hit when we get to a new strip/grid
        
        %If this is not the first strip/grid, compute electrode pairs
        if nStripGrid
            if dim(1)==1
                % strip electrode
                for a=1:(dim(2)-1),
                    nPairs=nPairs+1;
                    elecPairs{nPairs,3}=crntColor;
                    elecPairs{nPairs,1}=tempLabels{a};
                    elecPairs{nPairs,2}=tempLabels{a+1};
                end
            else
                % Grid
                gridLines=derive_grid_lines(crntLabel,dim);
                for a=1:size(gridLines,1)
                    for b=1:(length(gridLines{a,2})-1),
                        nPairs=nPairs+1;
                        elecPairs{nPairs,3}=crntColor;
                        elecPairs{nPairs,1}=[crntLabel '-' num2str(gridLines{a,2}(b))]; % note the dash
                        elecPairs{nPairs,2}=[crntLabel '-' num2str(gridLines{a,2}(b+1))]; % note the dash
                    end
                end
            end
        end
        tempLabels=[];
        tempLabelsCt=0;
        nStripGrid=nStripGrid+1;
        crntLabel = fgetl(fid);
    elseif strcmpi(line,'#Dimensions')
        % New strip/grid dimensions
        dim = str2num(fgetl(fid));
        crntCt=dim(1)*dim(2); % Strips start with highest # in mrid file
    elseif strcmpi(line,'#Color')
        % New strip/grid color
        crntColor=str2num(fgetl(fid));
    end
    %elseif strncmpi(line,'# Electrode Grid')
end
fid = fclose(fid);
elecMatrix=elecMatrix+1; % BioImageSuite indexes the first voxel as [0 0 0]

% Compute electrode pairs for final stip/grid
if nStripGrid
    if dim(1)==1
        % strip electrode
        for a=1:(dim(2)-1),
            nPairs=nPairs+1;
            elecPairs{nPairs,3}=crntColor;
            elecPairs{nPairs,1}=tempLabels{a};
            elecPairs{nPairs,2}=tempLabels{a+1};
        end
    else
        % Grid
        gridLines=derive_grid_lines(crntLabel,dim);
        for a=1:size(gridLines,1)
            for b=1:(length(gridLines{a,2})-1),
                nPairs=nPairs+1;
                elecPairs{nPairs,3}=crntColor;
                elecPairs{nPairs,1}=[crntLabel '-' num2str(gridLines{a,2}(b))]; % note the dash
                elecPairs{nPairs,2}=[crntLabel '-' num2str(gridLines{a,2}(b+1))]; % note the dash
            end
        end
    end
end